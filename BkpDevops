<# Caso voce prefira pode usar o Connect-AzAccount TenantId <tenantid>
essa forma e menos segura mais funciona normalmente 
#>


# Conectar no Azure via Service Princial

$AppId = "<ID do Aplicativo>"
$AppSecret = "<Segredo do Aplicativo>"
$TenantId = "<ID do Tenant>"
$SecureSecret = $AppSecret | ConvertTo-SecureString -AsPlainText -Force

$Credential = New-Object -TypeName System.Management.Automation.PSCredential `
-ArgumentList $AppId,$SecureSecret

Connect-AzAccount -ServicePrincipal -Credential $Credential -TenantId $TenantId

# Definir as variáveis
$PAT = "<Token de Acesso Pessoal>"
$OrgName = "<Nome da Organização>"
$ProjectName = "<Nome do Projeto>"
$RepoNames = @("") # lista dos nomes dos repositórios que você quer fazer backup
$BackupFolder = "C:\AzureDevOpsBackup"
$StorageAccountName = "<Nome da Conta de Armazenamento>"
$StorageAccountKey = "<Chave da Conta de Armazenamento>"
$StorageContainerName = "<Nome do Container de Armazenamento>"
$ConnectionString = "<Connection string da sua Stoage Account>"
# Definir diretório de backup
$backupDirectory = Join-Path -Path $BackupFolder -ChildPath $ProjectName

# Criar diretório de backup, se não existir
New-Item -ItemType Directory -Force -Path $backupDirectory | Out-Null

# Gerar o nome do arquivo de backup
$dt = Get-Date -Format 'yyyyMMdd-HHmmss'
$backupFileNameGit = "git-$($dt).zip"
$backupFileNameWorkItem = "workitem-$($dt).csv"
$backupFilePathGit = Join-Path -Path $backupDirectory -ChildPath $backupFileNameGit
$backupFilePathWorkItem = Join-Path -Path $backupDirectory -ChildPath $backupFileNameWorkItem

# Conectar ao Azure DevOps usando o PAT
Set-VSTeamAccount -Account $OrgName -PersonalAccessToken $PAT

# Clonar os repositórios usando o comando git clone
foreach ($RepoName in $RepoNames) {
    $destinationPath = Join-Path -Path $backupDirectory -ChildPath $RepoName
    git clone (Get-VSTeamGitRepository | select -ExpandProperty remoteUrl) $destinationPath
}

# Criar um arquivo zip com os repositórios clonados
Compress-Archive -Path "$backupDirectory\*" -DestinationPath $backupFilePathGit -Force

# Obter os work items dos boards usando o comando Get-VSTeamWorkItem
$WorkItems = Get-VSTeamWorkItemType -ProjectName $ProjectName 

# Exportar os dados dos work items para um arquivo csv
$WorkItems | Export-Csv -Path $backupFilePathWorkItem -NoTypeInformation

# Definir o contexto do Azure DevOps
$token = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes(":$($personalAccessToken)"))
$header = @{Authorization = "Basic $token" }
$uriBase = "https://dev.azure.com/$organization/$project/_apis"

# Backup dos pipelines
$pipelinesUrl = "$uriBase/pipelines?api-version=6.0-preview.1"
$pipelinesResponse = Invoke-RestMethod -Uri $pipelinesUrl -Headers $header -Method Get
$pipelines = $pipelinesResponse.value
$pipelines | ForEach-Object {
    $pipelineName = $_.name
    $pipelineId = $_.id
    $pipelineUrl = "$uriBase/pipelines/$pipelineId?api-version=6.0-preview.1"
    $pipelineContent = Invoke-RestMethod -Uri $pipelineUrl -Headers $header -Method Get
    $pipelineContent | ConvertTo-Json | Out-File "$backupDirectory\Pipeline_$pipelineName.json"
}

# Backup dos releases
$releasesUrl = "$uriBase/release/releases?api-version=6.0"
$releasesResponse = Invoke-RestMethod -Uri $releasesUrl -Headers $header -Method Get
$releases = $releasesResponse.value
$releases | ForEach-Object {
    $releaseName = $_.name
    $releaseId = $_.id
    $releaseUrl = "$uriBase/release/releases/$releaseId?api-version=6.0"
    $releaseContent = Invoke-RestMethod -Uri $releaseUrl -Headers $header -Method Get
    $releaseContent | ConvertTo-Json | Out-File "$backupDirectory\Release_$releaseName.json"
}

# Backup das libraries
$librariesUrl = "$uriBase/distributedtask/taskgroups?api-version=6.0-preview.1"
$librariesResponse = Invoke-RestMethod -Uri $librariesUrl -Headers $header -Method Get
$libraries = $librariesResponse.value
$libraries | ForEach-Object {
    $libraryName = $_.name
    $libraryId = $_.id
    $libraryUrl = "$uriBase/distributedtask/taskgroups/$libraryId?api-version=6.0-preview.1"
    $libraryContent = Invoke-RestMethod -Uri $libraryUrl -Headers $header -Method Get
    $libraryContent | ConvertTo-Json | Out-File "$backupDirectory\Library_$libraryName.json"
}
# Criar a conexão com a conta de armazenamento do Azure
$Context = New-AzStorageContext -ConnectionString $ConnectionString

# Fazer upload dos arquivos no blob container
Set-AzStorageBlobContent -Context $Context -Container $StorageContainerName -Blob $backupFileNameGit -File $backupFilePathGit -Force
Set-AzStorageBlobContent -Context $Context -Container $StorageContainerName -Blob $backupFileNameWorkItem -File $backupFilePathWorkItem -Force

# Remover os arquivos temporários da pasta de backup
Remove-Item -Path "$backupDirectory\*" -Recurse -Force

Write-Host "Backup do projeto $projectName concluído."
